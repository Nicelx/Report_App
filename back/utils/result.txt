
********************* 
C:\projects\Vue\malina reports\front\src\assets\styles.css

/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/
/* #region reset */
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video,
input,
select {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
  box-sizing: border-box;
}
/* HTML5 display-role reset for older browsers */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}
body {
  line-height: 1;
}
ol,
ul {
  list-style: none;
}
blockquote,
q {
  quotes: none;
}
blockquote:before,
blockquote:after,
q:before,
q:after {
  content: "";
  content: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
a {
  color: inherit;
  text-decoration: none;
}

/* #endregion */

/* #region base */
body {
  background-color: var(--color-dark);
  color: var(--color-light);
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  line-height: 1.6;
  min-height: 100vh;
  font-size: 18px;
}
input,
select {
  max-width: 300px;
}

:root {
  --color-primary: #00ff95;
  --color-secondary: #ff00d0;
  --color-accent: #ffd000;
  --color-dark: #001f0f;
  --color-light: #e6fff4;
  --glow: 0 0 30px rgba(0, 255, 149, 0.8), 0 0 55px rgba(0, 255, 149, 0.4);
  --glow-color: rgba(0, 255, 149, 0.95);
  --glow-primary: 0 0 15px var(--glow-color), 0 0 30px rgba(0, 255, 149, 0.8),
    0 0 45px rgba(0, 255, 149, 0.4);
  --glow-secondary: 0 0 15px rgba(255, 0, 208, 0.8),
    0 0 30px rgba(255, 0, 208, 0.6);
  --glow-accent: 0 0 15px rgba(255, 208, 0, 0.8),
    0 0 30px rgba(255, 208, 0, 0.6);
}
.wrapper {
  margin-inline: auto;
  max-width: 1280px;
  width: 100%;
}
.title {
  font-size: 2.8rem; /* Крупный размер для главных заголовков */
  font-weight: 700;
  line-height: 1.2;
  color: var(--color-primary);
  text-shadow: 0 0 10px var(--glow-color);
}
.title-secondary {
  font-size: 1.8rem; /* Умеренно увеличенный размер */
  font-weight: 600;
  line-height: 1.3;
  margin-bottom: 1.2rem;
  color: var(--color-accent);
}
.m3 {
  margin-bottom: 30px;
}
.m2 {
  margin-bottom: 20px;
}
.m1 {
  margin-bottom: 10px;
}

/* #endregion */

/* #region components */
.btn {
  display: inline-block;
  padding-inline: 24px;
  height: 45px;
  border: none;
  border-radius: 2px;
  font-weight: 600;
  text-align: center;
  text-decoration: none;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
  outline: none;
  font-size: 1rem;
  z-index: 1;
}
.btn:hover {
  box-shadow: var(--glow-primary);
}

.btn:active::after {
  box-shadow: 0 0 25px var(--glow-color);
}

.btn-primary {
  background-color: var(--color-primary);
  color: var(--color-light);
}

.btn-secondary {
  background-color: var(--color-secondary);
  color: var(--color-light);
}
.btn-secondary:hover {
  box-shadow: var(--glow-secondary);
}

.btn-accent {
  background-color: var(--color-accent);
  color: var(--color-light);
}
.btn-accent:hover {
  box-shadow: var(--glow-accent);
}

.btn-outline {
  background-color: transparent;
  color: var(--color-primary);
  border: 2px solid var(--color-primary);
}

.btn-outline:hover {
  background-color: var(--color-primary);
  color: var(--color-light);
}

.input {
  display: block;
  width: 100%;
  padding: 12px 16px;
  background-color: rgba(0, 31, 15, 0.5);
  color: var(--color-light);
  border: 1px solid var(--color-primary);
  border-radius: 2px;
  font-family: inherit;
  font-size: 1rem;
  transition: all 0.3s ease;
}

.input:focus {
  outline: none;
  border-color: var(--color-primary);
  box-shadow: var(--glow-primary);
}
.select {
  display: block;
  width: 100%;
  padding: 12px 40px 12px 16px;
  background-color: rgba(0, 31, 15, 0.5);
  color: var(--color-light);
  border: 1px solid var(--color-primary);
  border-radius: 2px;
  appearance: none;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  background-image: linear-gradient(
      45deg,
      transparent 50%,
      var(--color-primary) 50%
    ),
    linear-gradient(135deg, var(--color-primary) 50%, transparent 50%);
  background-position: calc(100% - 17px) 50%, calc(100% - 12px) 50%;
  background-size: 5px 5px, 5px 5px;
  background-repeat: no-repeat;
}

.select:is(:focus, :hover) {
  outline: none;
  border-color: var(--color-primary);
  box-shadow: var(--glow-primary);
}

.select option {
  background-color: var(--color-dark);
  color: var(--color-light);
  padding: 8px 12px;
}

.select option:checked {
  background-color: var(--color-primary);
  color: var(--color-dark);
  font-weight: 600;
}

/* #endregion */

/* #region task card */
.task {
  background-color: rgba(0, 31, 15, 0.4);
  border: 1px solid rgba(0, 255, 149, 0.2);
  border-radius: 4px;
  padding: 12px;
  margin-bottom: 12px;
  position: relative;
  transition: all 0.3s ease;
}

.task:hover {
  border-color: var(--color-primary);
  box-shadow: var(--glow-primary);
}

.task__description {
  margin-bottom: 5px;
  line-height: 1.5;
  word-break: break-word;
}

.task__project {
  font-weight: 600;
  color: var(--color-secondary);
  font-size: 12px;
  text-shadow: 0 0 5px rgba(255, 0, 208, 0.4);
}

.task__time {
  color: rgba(230, 255, 244, 0.7);
  font-size: 12px;
}

.task__actions {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
}

.task__edit {
  position: absolute;
  bottom: 10px;
}
.task__extra {
  padding-right: 100px;
  display: flex;
  justify-content: space-between;
  gap: 10px;
  align-items: center;
}

/* #endregion */
/* #region message component */
.message {
  width: 300px;
  padding: 18px 22px;
  border-radius: 4px;
  margin-bottom: 25px;
  border: 1px solid transparent;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  transition: all 0.3s ease;
  animation: fadeOut 0.7s ease-in-out 1.5s forwards;
  opacity: 1;
  transform: translateY(0);
}

.message--success {
  background-color: rgba(0, 31, 15, 0.8);
  color: var(--color-primary);
  border-color: rgba(0, 255, 149, 0.3);
  box-shadow: var(--glow-primary);
}
.message--error {
  background-color: rgba(31, 0, 15, 0.8);
  color: var(--color-secondary);
  border-color: rgba(255, 0, 208, 0.3);
  box-shadow: var(--glow-secondary);
}

/* #endregion */

/* #region keyframes */
@keyframes fadeOut {
  0% {
    opacity: 1;
    transform: translateY(0);
  }
  100% {
    opacity: 0;
    transform: translateY(-30px);
  }
}

/* #endregion */

********************* 
C:\projects\Vue\malina reports\front\src\components\Tasks.vue

<script>
export default {
  props: {
    tasks: {
      type: Array,
      required: true,
      default: () => [], // Значение по умолчанию - пустой массив
    },
    projects: {
      type: Array,
      required: true,
      default: () => [], // Значение по умолчанию - пустой массив
    },
  },
  methods: {
    formatDate(dateStr) {
      const utcDate = new Date(dateStr);
      const ruDate = utcDate.toLocaleDateString("ru-RU");
      return ruDate;
    },
  },
  computed: {
    projectMap() {
      const map = {};
      this.projects.forEach((project) => {
        map[project.id] = project.name;
      });
      return map;
    },
    sortedTasks() {
      return [...this.tasks].sort((a, b) => {
        return new Date(b.completed_date) - new Date(a.completed_date);
      });
    },
  },
};
</script>

<template>
  <div class="tasks">
    <p class="title-secondary">Список выполненных задач:</p>
    <div class="tasks__list">
      
      <div v-for="task in sortedTasks" :key="task.id" class="task">
        <p class="task__description">
          {{ task.task_description }}
        </p>

        <div class="task__extra">
          <p class="task__project">{{ projectMap[task.project_id] }}</p>
          <p class="task__time">{{ formatDate(task.completed_date) }}</p>
        </div>

        <div class="task__actions">
          <button class="btn btn-accent task__edit">Edit</button>
        </div>
      </div>
    </div>
  </div>
</template>

********************* 
C:\projects\Vue\malina reports\front\src\router\index.js

import Settings from '../views/Settings.vue';
import Home from '../views/Home.vue';
import Login from '../views/Login.vue';
import Register from '../views/Register.vue';

import { createRouter, createWebHistory } from 'vue-router';


const routes = [
  {
    path: '/',
    name: 'Home',
    component: Home
  },
  {
    path: '/login',
    name: 'Login',
    component: Login
  },
  {
    path: '/register',
    name: 'Register',
    component: Register
  },
  {
    path: '/settings',
    name : 'Settings',
    component: Settings
  }
]

const router = createRouter({
  history: createWebHistory(),
  routes
})

export default router
********************* 
C:\projects\Vue\malina reports\front\src\views\Home.vue

<script>
import Tasks from "@/components/Tasks.vue";
export default {
  data() {
    return {
      isAddOpen: false,
      taskDescription: "",
      taskDate: this.getDate(),
      message: "",
      selectedProject: "",
      selectedService: "",
      projects: [],
      services: [],
      tasks: [],
    };
  },
  components: {
    Tasks,
  },
  methods: {
    getDate() {
      const today = new Date();
      const year = today.getFullYear();
      const month = String(today.getMonth() + 1).padStart(2, "0");
      const day = String(today.getDate()).padStart(2, "0");

      return `${year}-${month}-${day}`;
    },

    async addTask() {
      const token = localStorage.getItem("authToken");
      const { id: userId } = JSON.parse(localStorage.getItem("user"));

      const response = await fetch("http://localhost:3000/add-task", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          user_id: userId,
          task_description: this.taskDescription,
          project_id: this.selectedProject,
          service_id: this.selectedService,
          completed_date: this.taskDate,
        }),
      });

      console.log('response' ,response);

      this.updateTasks();
    },

    async getInfo() {
      const token = localStorage.getItem("authToken");
      // const { id: userId } = JSON.parse(localStorage.getItem("user"));

      const response = await fetch("http://localhost:3000/get-info", {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        // body: JSON.stringify({
        //   user_id: userId,
        // }),
      });

      const data = await response.json(); // предполагается, что сервер возвращает JSON
      console.log(data);

      this.projects = data.projects;
      this.services = data.services;
      this.tasks = data.tasks;
    },

    async updateTasks() {
      const token = localStorage.getItem("authToken");
      
      const response = await fetch("http://localhost:3000/get-tasks", {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      const data = await response.json(); // предполагается, что сервер возвращает JSON
     
      this.tasks = data;
    },
    toggleIsAddOpen() {
      this.isAddOpen = !this.isAddOpen;
    },
    getProjectName(projectId) {
      const project = this.projects.find((p) => p.id === projectId);
      return project ? project.name : "Неизвестный проект";
    },
  },
  mounted() {
    this.getInfo(); // Вызов метода при загрузке компонента
  },
};
</script>

<template>
  <div class="wrapper">
    <h1 class="title m3">Your Tasks</h1>

    <p v-if="message">{{ message }}</p>

    <button @click="toggleIsAddOpen" class="btn btn-accent m1">
      Add new task report
    </button>
    <button @click="getInfo" class="btn btn-accent m1">get info</button>

    <div class="add-task-block" v-if="isAddOpen">
      <input
        class="input m1"
        v-model="taskDescription"
        type="textarea"
        placeholder="task description"
      />
      <input class="input m1" v-model="taskDate" type="date" />

      <select class="select m1" v-model="selectedProject">
        <option disabled value="">Choose project</option>
        <option
          v-for="project in projects"
          :key="project.id"
          :value="project.id"
        >
          {{ project.name }}
        </option>
      </select>

      <select class="select m1" v-model="selectedService">
        <option disabled value="">Choose service</option>
        <option
          v-for="service in services"
          :key="service.id"
          :value="service.id"
        >
          {{ service.name }}
        </option>
      </select>

      <button @click="addTask" class="btn btn-primary m1">Add</button>
    </div>

    <Tasks :tasks="tasks" :projects="projects" />

    <!-- <div class="message message--success">Успех!</div>
    <div class="message message--success">Задача успешно создана</div>

    <div class="message message--error">Ошибка</div> -->
  </div>
</template>

********************* 
C:\projects\Vue\malina reports\front\src\views\Login.vue

<script>
export default {
  data() {
    return {
      username: "",
      password: "",
      message: ''
    };
  },
  methods: {
    async login() {
      const response = await fetch("http://localhost:3000/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          username: this.username,
          password: this.password,
        }),
      });

      if (response.ok) {
        const data = await response.json();
        console.log(data, 'data here')
        localStorage.setItem("authToken", data.token);
        localStorage.setItem("user", JSON.stringify(data.user));

        this.$router.push("/");
      } else {
        // console.error("Login failed:", await response.json());
        this.message = 'Login failed';
      }

      console.log(response);
    },
  },
};
</script>

<template>
  <div class = "wrapper">
    <h1 class = "title m2">Login</h1>
    <p>{{ message }}</p>
      <p class = "m1">Login</p>
      <input
        class = "input m1"
        v-model="username"
        type="text"
        placeholder="login"
      />
    <p class = "m1">Password</p>
    <input
      class = "input m1"
      v-model="password"
      type="password"
      placeholder="password"
    />
    <div class = "btns">
      <button @click="login" class = "btn btn-primary">Log In</button>
      <button class = "btn btn-outline"><router-link to="/register">Register</router-link></button>
    </div>
  </div>
</template>

<style scoped>
  .btns {
    display: flex;
    gap: 10px;
  }
</style>

********************* 
C:\projects\Vue\malina reports\front\src\views\Register.vue

<script>
export default {
  data() {
    return {
      username: "",
      password: "",
    };
  },
  methods: {
    async createUser() {
      const response = await fetch("http://localhost:3000/create-user", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ username: this.username, password: this.password }),
      });
    },
  },
};

</script>

<template>
   <div class = "wrapper">
    <h1 class = "title m2">Registration</h1>
    <p>{{ message }}</p>
      <p class = "m1">Login</p>
      <input
        class = "input m1"
        v-model="username"
        type="text"
        placeholder="login"
      />
    <p class = "m1">Password</p>
    <input
      class = "input m1"
      v-model="password"
      type="password"
      placeholder="password"
    />
    <div class = "btns">
      <button @click="createUser" class = "btn btn-primary">Register</button>
    </div>
  </div>
</template>
********************* 
C:\projects\Vue\malina reports\front\src\views\Settings.vue

<script>
export default {
  data() {
    return {
      taskDateTime: this.getCurrentDateTime(),
    };
  },
  methods: {
    getCurrentDateTime() {
      const now = new Date();

      now.setSeconds(0, 0);

      return now.toISOString().slice(0, 16);
    },
  },
};
</script>

<template>
  <div style="width: 400px">
    <button class="btn btn-primary btn-md">Primary</button>
    <button class="btn btn-secondary">Secondary</button>
    <button class="btn btn-accent">Accent</button>
    <button class="btn btn-outline">Outline</button>
  </div>

  <input class="input m1" v-model="taskDateTime" type="datetime-local" />

  <p>
    {{  }}
  </p>
</template>

********************* 
C:\projects\Vue\malina reports\front\src\App.vue

<script>
export default {
  data() {
    return {
      username: "",
      password: "",
    };
  },
  methods: {
    async createUser() {
      const response = await fetch("http://localhost:3000/create-user", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          username: this.username,
          password: this.password,
        }),
      });
    },
  },
};
</script>

<template>
  <nav class = "nav m2">
    <router-link to="/">Home</router-link>
    <router-link to="/login">Login</router-link>
    <router-link to="/register">Register</router-link>
    <router-link to="/settings">Settings</router-link>
    <a href="">Log out</a>
  </nav>

  <router-view />
</template>

<style scoped>
  .nav {
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: end;
    gap: 15px;
    background-color: var(--color-primary);
    padding-inline: 20px;
  }
  .nav a {
    color: var(--color-light);
    font-weight: 700;
    text-decoration: none;
  }
</style>

********************* 
C:\projects\Vue\malina reports\front\src\main.js

import './assets/styles.css';

import { createApp } from 'vue'
import router from './router';


import App from './App.vue'


const myApp = createApp(App);

myApp.use(router);
myApp.mount('#app')
