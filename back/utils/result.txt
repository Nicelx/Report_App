
********************* 
C:\projects\Vue\malina reports\back\config\db.js

const mysql = require('mysql2/promise');

const pool = mysql.createPool({
  host:'localhost',
  user: process.env.DB_USER,
  password: process.env.DB_PWD,
  database: 'report_app',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
});

module.exports = pool;
********************* 
C:\projects\Vue\malina reports\back\controllers\authController.js

const jwt = require("jsonwebtoken");
const User = require("../models/User");

exports.login = async (req, res) => {
  console.log(req.body);

  const { username, password } = req.body;
  const user = await User.findByUsername(username);

  if (!user) {
    return res.status(401).json({ message: "Invalid credentials" });
  }

  if (!(await User.comparePasswords(password, user.password))) {
    return res.status(401).json({ message: "Invalid credentials" });
  }

  const token = jwt.sign(
    { id: user.id, username: user.username },
    process.env.JWT_SECRET,
    { expiresIn: process.env.JWT_EXPIRES_IN }
  );
  return res.json({
    message: "Login successful",
    token,
    user: { id: user.id, username: user.username },
  });
};

********************* 
C:\projects\Vue\malina reports\back\controllers\infoController.js

const pool = require("../config/db");
const Project = require("../models/Project");
const Service = require("../models/Service");
const Task = require("../models/Task");

exports.getInfo = async (req, res) => {
  const data = {}

  const projects = await Project.getAll();
  const services = await Service.getAll();
  const tasks = await Task.getAll(req.user.id)

  if (!projects || !services) {
    return res.status(500).json({message: 'projects или services не найдены в бд'})
  }
  data.projects = projects;
  data.services = services;
  data.tasks = tasks;

  res.send(data);


//   getting services


};

exports.getTasks = async (req, res) => {
  try {
    const tasks = await Task.getAll(req.user.id);
    res.send(tasks);
  } catch (error) {
    res.status(500).json({message: 'Получить задачи не получилось, не фартануло, не повезло эх'})
  }


}
********************* 
C:\projects\Vue\malina reports\back\controllers\taskController.js

const Task = require("../models/Task");

exports.addTask = async (req, res) => {
  console.log(req.user);
  const { user_id, task_description, completed_date, project_id, service_id } =
    req.body;

  if (
    !user_id ||
    !task_description ||
    !completed_date ||
    !project_id ||
    !service_id
  )
    return res.status(500).json({
      message: "Не все поля имеют значения",
    });

  try {
    await Task.addTask({
      user_id,
      task_description,
      completed_date,
      project_id,
      service_id,
    });
  } catch (error) {
    return res.status(500).json({
      message: "Ошибка добавления задачи в базу данных",
    });
  }

  return res.send({
    message: "task added",
  });
};

exports.updateTask = async (req, res) => {
  try {
    const updates = req.body;

    await Task.updateTask({
      ...updates,
    });

    return res.send({
      message: "task updated",
    });
  } catch (error) {
    res.status(500).json({
      message: "Ошибка обновления задачи",
    });
  }
};
exports.deleteTask = async (req, res) => {
  try {
    const { id } = req.body;

    await Task.deleteTask(id);

    res.send({
      message: "task Deleted",
    });
  } catch (error) {
    res.status(500).json({
      message : 'удалить не получилось'
    })
  }
};

********************* 
C:\projects\Vue\malina reports\back\controllers\userController.js

const User = require("../models/User");

exports.getUsers = async (req, res) => {
  try {
    const users = await User.getAll(); // Используем const
    res.json(users); // Отправляем один ответ
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Server error" }); // Один ответ при ошибке
  }
};

exports.createUser = async (req, res) => {
  try {
    response = await User.createUser({
      username: req.body.username,
      passwrod: req.body.passwrod,
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }

  if (response)
    res.send({
      message: "user created",
    });
};

********************* 
C:\projects\Vue\malina reports\back\middleware\auth.js

const jwt = require('jsonwebtoken');


module.exports = (req, res, next) => {
    const authHeader = req.headers.authorization;
    console.log(authHeader);

     if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return res.status(401).json({ message: 'Authentication required' });
    }

    const token = authHeader.split(' ')[1];

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        req.user = decoded;    // Добавляем данные пользователя в запрос
        console.log(req.user);
    } catch (error) {
        return res.status(401).json({ message: 'Invalid or expired token' });
    }

    // console.log('token', token);
    // console.log('decoded', decoded);
    console.log('auth ok');
    next();
}
********************* 
C:\projects\Vue\malina reports\back\models\Project.js

const  pool  = require("../config/db");

class Project {
  static async getAll() {
    const [rows] = await pool.query("SELECT * FROM projects");
    return rows;
  }
}

module.exports = Project;

********************* 
C:\projects\Vue\malina reports\back\models\Task.js

const pool = require("../config/db");

class Task {
  static async addTask({
    user_id,
    task_description,
    project_id,
    service_id,
    completed_date,
  }) {
    try {
      const [result] = await pool.execute(
        "INSERT INTO tasks (user_id, task_description, completed_date, project_id, service_id) VALUES (?, ?, ?, ?, ?)",
        [user_id, task_description, completed_date, project_id, service_id]
      );

      if (result) return result.insertId;
    } catch (error) {
      console.error(error);
    }
  }

  static async updateTask({
    id,
    task_description,
    completed_date,
    project_id,
    service_id,
  }) {
    try {
      if (id === undefined) {
        throw new Error("Task ID is required for update");
      }
      const executedStr =  `
        update tasks
        set
        task_description = '${task_description}',
        completed_date = '${completed_date}',
        project_id = ${project_id},
        service_id = ${service_id}
        where id = ${id}
      `;
      console.log(executedStr);
      const [result] = await pool.execute(executedStr);
      console.log("result =", result);
    } catch (error) {
        throw new Error(error);
    }

  }
  static async deleteTask(taskId) {
    if (!taskId) {
      throw new Error('task id - false');
    }
    const [result] = await pool.execute(`
        delete from tasks where id = ${taskId}
      `)

  }


  static async getAll(user_id) {
    let query;
    if (user_id) {
      query = `SELECT * FROM tasks where user_id = ${user_id}`;
    } else {
      query = `SELECT * FROM tasks`;
    }

    const [rows] = await pool.query(query);
    return rows;
  }
}

module.exports = Task;

********************* 
C:\projects\Vue\malina reports\back\models\User.js

const pool = require("../config/db");
const bcrypt = require("bcryptjs");

class User {
  static async create({ username, password }) {
    try {
      const [result] = await pool.execute(
        "INSERT INTO users (username,  password) VALUES (?, ?)",
        [username, password]
      );
      if (result) return result.insertId;
    } catch (error) {
      console.error('create method catch error')
    }
  }

  static async getAll() {
    const [rows] = await pool.query("SELECT id, username FROM users");
    return rows;
  }
  static async findByUsername(username) {
    try {
      const [users] = await pool.execute(
        "SELECT * FROM users WHERE username = ?",
        [username]
      );
      return users[0];
    } catch (error) {}
  }

  static async comparePasswords(candidatePassword, hashedPassword) {
    if (candidatePassword === hashedPassword) return true;
    return false;

    // return bcrypt.compare(candidatePassword, hashedPassword);
  }
}

module.exports = User;

********************* 
C:\projects\Vue\malina reports\back\models\Service.js

const  pool  = require("../config/db");

class Service {
  static async getAll() {
    const [rows] = await pool.query("SELECT * FROM Services");
    return rows;
  }
}

module.exports = Service;
********************* 
C:\projects\Vue\malina reports\back\index.js

const express = require("express");
const cors = require("cors");
require('dotenv').config();
const authMiddleware = require('./middleware/auth');

const User = require("./models/User");

const { getUsers } = require("./controllers/userController");
const { login } = require("./controllers/authController");
const {addTask, updateTask,deleteTask} = require('./controllers/taskController');
const { getInfo, getTasks } = require("./controllers/infoController");

const app = express();
const port = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

app.get("/get-info", authMiddleware , getInfo);
app.get("/get-tasks", authMiddleware, getTasks);
app.put("/update-task/:id", authMiddleware, updateTask);
app.delete('/delete-task/:id', authMiddleware, deleteTask);

app.post("/login", login);

app.post("/create-user", async (req, res) => {
  console.log(req.body);

  await User.create({
    username: req.body.username,
    password: req.body.password,
  });

  // В этом блоке можно обработать запрос и отправить ответ
  res.send({ message: "Пользователь создан" });
});

app.post("/add-task", authMiddleware, addTask);

app.listen(port, () => {
  console.log(`Сервер запущен на порту ${port}`);
});
