
********************* 
C:\projects\Vue\malina reports\back\config\db.js

const mysql = require('mysql2/promise');

const pool = mysql.createPool({
  host:'localhost',
  user: process.env.DB_USER,
  password: process.env.DB_PWD,
  database: 'report_app',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
});

module.exports = pool;
********************* 
C:\projects\Vue\malina reports\back\controllers\authController.js

const jwt = require("jsonwebtoken");
const User = require("../models/User");

exports.login = async (req, res) => {
  console.log(req.body);

  const { username, password } = req.body;
  const user = await User.findByUsername(username);

  if (!user) {
    return res.status(401).json({ message: "Invalid credentials" });
  }

  if (!(await User.comparePasswords(password, user.password))) {
    return res.status(401).json({ message: "Invalid credentials" });
  }

  const token = jwt.sign(
    { id: user.id, username: user.username },
    process.env.JWT_SECRET,
    { expiresIn: process.env.JWT_EXPIRES_IN }
  );
  return res.json({
    message: "Login successful",
    token,
    user: { id: user.id, username: user.username },
  });
};

********************* 
C:\projects\Vue\malina reports\back\controllers\infoController.js

const pool = require("../config/db");
const Project = require("../models/Project");
const Service = require("../models/Service");
const Task = require("../models/Task");

exports.getInfo = async (req, res) => {
  const data = {}

  const projects = await Project.getAll();
  const services = await Service.getAll();
  const tasks = await Task.getAll(req.user.id)

  if (!projects || !services) {
    return res.status(500).json({message: 'projects или services не найдены в бд'})
  }
  data.projects = projects;
  data.services = services;
  data.tasks = tasks;

  res.send(data);


//   getting services


};

exports.getTasks = async (req, res) => {
  try {
    const tasks = await Task.getAll(req.user.id);
    res.send(tasks);
  } catch (error) {
    res.status(500).json({message: 'Получить задачи не получилось, не фартануло, не повезло эх'})
  }


}
********************* 
C:\projects\Vue\malina reports\back\controllers\taskController.js

const Task = require("../models/Task");

exports.addTask = async (req, res) => {
  console.log(req.user);
  const { user_id, task_description, completed_date, project_id, service_id } =
    req.body;

  if (
    !user_id ||
    !task_description ||
    !completed_date ||
    !project_id ||
    !service_id
  )
    return res.status(500).json({
      message: "Не все поля имеют значения",
    });

  try {
    await Task.addTask({
      user_id,
      task_description,
      completed_date,
      project_id,
      service_id,
    });
  } catch (error) {
    return res.status(500).json({
      message: "Ошибка добавления задачи в базу данных",
    });
  }

  return res.send({
    message: "task added",
  });
};


exports.updateTask = async (req, res) => {
  console.log('updateTask');
}
********************* 
C:\projects\Vue\malina reports\back\controllers\userController.js

const User = require("../models/User");

exports.getUsers = async (req, res) => {
  try {
    const users = await User.getAll(); // Используем const
    res.json(users); // Отправляем один ответ
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Server error" }); // Один ответ при ошибке
  }
};

exports.createUser = async (req, res) => {
  try {
    response = await User.createUser({
      username: req.body.username,
      passwrod: req.body.passwrod,
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }

  if (response)
    res.send({
      message: "user created",
    });
};

********************* 
C:\projects\Vue\malina reports\back\middleware\auth.js

const jwt = require('jsonwebtoken');


module.exports = (req, res, next) => {
    const authHeader = req.headers.authorization;
    console.log(authHeader);

     if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return res.status(401).json({ message: 'Authentication required' });
    }

    const token = authHeader.split(' ')[1];

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        req.user = decoded;    // Добавляем данные пользователя в запрос
        console.log(req.user);
    } catch (error) {
        return res.status(401).json({ message: 'Invalid or expired token' });
    }

    // console.log('token', token);
    // console.log('decoded', decoded);
    console.log('auth ok');
    next();
}
********************* 
C:\projects\Vue\malina reports\back\models\Project.js

const  pool  = require("../config/db");

class Project {
  static async getAll() {
    const [rows] = await pool.query("SELECT * FROM projects");
    return rows;
  }
}

module.exports = Project;

********************* 
C:\projects\Vue\malina reports\back\models\Task.js

const pool = require("../config/db");

class Task {
  static async addTask({
    user_id,
    task_description,
    project_id,
    service_id,
    completed_date,
  }) {
    try {
      const [result] = await pool.execute(
        "INSERT INTO tasks (user_id, task_description, completed_date, project_id, service_id) VALUES (?, ?, ?, ?, ?)",
        [user_id, task_description, completed_date, project_id, service_id]
      );

      if (result) return result.insertId;
    } catch (error) {
      console.error(error);
    }
  }

  // static async updateTask({

  // }) {

  // }

  static async getAll(user_id) {
    let query;
    if (user_id) {
      query = `SELECT * FROM tasks where user_id = ${user_id}`;
    } else {
      query = `SELECT * FROM tasks`;
    }

    const [rows] = await pool.query(query);
    return rows;
  }
}

module.exports = Task;

********************* 
C:\projects\Vue\malina reports\back\models\User.js

const pool = require("../config/db");
const bcrypt = require("bcryptjs");

class User {
  static async create({ username, password }) {
    try {
      const [result] = await pool.execute(
        "INSERT INTO users (username,  password) VALUES (?, ?)",
        [username, password]
      );
      if (result) return result.insertId;
    } catch (error) {
      console.error('create method catch error')
    }
  }

  static async getAll() {
    const [rows] = await pool.query("SELECT id, username FROM users");
    return rows;
  }
  static async findByUsername(username) {
    try {
      const [users] = await pool.execute(
        "SELECT * FROM users WHERE username = ?",
        [username]
      );
      return users[0];
    } catch (error) {}
  }

  static async comparePasswords(candidatePassword, hashedPassword) {
    if (candidatePassword === hashedPassword) return true;
    return false;

    // return bcrypt.compare(candidatePassword, hashedPassword);
  }
}

module.exports = User;

********************* 
C:\projects\Vue\malina reports\back\models\Service.js

const  pool  = require("../config/db");

class Service {
  static async getAll() {
    const [rows] = await pool.query("SELECT * FROM Services");
    return rows;
  }
}

module.exports = Service;
********************* 
C:\projects\Vue\malina reports\back\index.js

const express = require("express");
const cors = require("cors");
require('dotenv').config();
const authMiddleware = require('./middleware/auth');

const User = require("./models/User");

const { getUsers } = require("./controllers/userController");
const { login } = require("./controllers/authController");
const {addTask} = require('./controllers/taskController');
const { getInfo, getTasks } = require("./controllers/infoController");

const app = express();
const port = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

app.get("/get-info", authMiddleware , getInfo);
app.get("/get-tasks", authMiddleware, getTasks);

app.post("/login", login);

app.post("/create-user", async (req, res) => {
  console.log(req.body);

  await User.create({
    username: req.body.username,
    password: req.body.password,
  });

  // В этом блоке можно обработать запрос и отправить ответ
  res.send({ message: "Пользователь создан" });
});

app.post("/add-task", authMiddleware, addTask);

app.listen(port, () => {
  console.log(`Сервер запущен на порту ${port}`);
});

********************* 
C:\projects\Vue\malina reports\front\src\components\Tasks.vue

<script>
export default {
  props: {
    tasks: {
      type: Array,
      required: true,
      default: () => [], // Значение по умолчанию - пустой массив
    },
    projects: {
      type: Array,
      required: true,
      default: () => [], // Значение по умолчанию - пустой массив
    },
  },
  methods: {
    formatDate(dateStr) {
      const utcDate = new Date(dateStr);
      const ruDate = utcDate.toLocaleDateString("ru-RU");
      return ruDate;
    },
  },
  computed: {
    projectMap() {
      const map = {};
      this.projects.forEach((project) => {
        map[project.id] = project.name;
      });
      return map;
    },
    sortedTasks() {
      return [...this.tasks].sort((a, b) => {
        return new Date(b.completed_date) - new Date(a.completed_date);
      });
    },
  },
};
</script>

<template>
  <div class="tasks">
    <p class="title-secondary">Список выполненных задач:</p>
    <div class="tasks__list">
      
      <div v-for="task in sortedTasks" :key="task.id" class="task">
        <p class="task__description">
          {{ task.task_description }}
        </p>

        <div class="task__extra">
          <p class="task__project">{{ projectMap[task.project_id] }}</p>
          <p class="task__time">{{ formatDate(task.completed_date) }}</p>
        </div>

        <div class="task__actions">
          <button class="btn btn-accent task__edit">Edit</button>
        </div>
      </div>
    </div>
  </div>
</template>

********************* 
C:\projects\Vue\malina reports\front\src\router\index.js

import Settings from '../views/Settings.vue';
import Home from '../views/Home.vue';
import Login from '../views/Login.vue';
import Register from '../views/Register.vue';

import { createRouter, createWebHistory } from 'vue-router';


const routes = [
  {
    path: '/',
    name: 'Home',
    component: Home
  },
  {
    path: '/login',
    name: 'Login',
    component: Login
  },
  {
    path: '/register',
    name: 'Register',
    component: Register
  },
  {
    path: '/settings',
    name : 'Settings',
    component: Settings
  }
]

const router = createRouter({
  history: createWebHistory(),
  routes
})

export default router
********************* 
C:\projects\Vue\malina reports\front\src\stores\index.js

export * from './exampleStore';
export * from './taskStore';
********************* 
C:\projects\Vue\malina reports\front\src\stores\exampleStore.js

import { defineStore } from 'pinia';

export const useExampleStore = defineStore('example', {
  state: () => ({
    counter: 0,
  }),
  actions: {
    increment() {
      this.counter++;
    },
  },
  getters: {
    doubleCount: (state) => state.counter * 2,
  },
});
********************* 
C:\projects\Vue\malina reports\front\src\stores\taskStore.js

import { defineStore } from "pinia";

export const useTaskStore = defineStore("task", {
  state: () => ({
    tasks: [],
    projects: [],
    services: [],
  }),
  actions: {
    async addTask(data) {
      const token = localStorage.getItem("authToken");
      const { id: user_id } = JSON.parse(localStorage.getItem("user"));

      const response = await fetch("http://localhost:3000/add-task", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          user_id,
          ...data,
        }),
      });

      await this.updateTasks();
    },

    async getInfo() {
      const token = localStorage.getItem("authToken");

      const response = await fetch("http://localhost:3000/get-info", {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      const data = await response.json(); // предполагается, что сервер возвращает JSON
      console.log(data);

      this.projects = data.projects;
      this.services = data.services;
      this.tasks = data.tasks;
    },

    async updateTasks() {
      const token = localStorage.getItem("authToken");

      const response = await fetch("http://localhost:3000/get-tasks", {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      const data = await response.json(); // предполагается, что сервер возвращает JSON

      this.tasks = data;
    },
  },
});

********************* 
C:\projects\Vue\malina reports\front\src\utils\util.js

export const getDatetime = (taskDate) => {
  const now = new Date();

  const hours = String(now.getHours()).padStart(2, "0");
  const minutes = String(now.getMinutes()).padStart(2, "0");
  const seconds = String(now.getSeconds()).padStart(2, "0");
  const datetimeValue = `${taskDate} ${hours}:${minutes}:${seconds}`;

  return datetimeValue;
};

********************* 
C:\projects\Vue\malina reports\front\src\views\Home.vue

<script>
import { mapStores } from "pinia";

import Tasks from "@/components/Tasks.vue";

import { useTaskStore } from "@/stores";
import { getDatetime } from "@/utils/util";


export default {
  data() {
    return {
      isAddOpen: false,
      isEditOpen: false,
      taskDescription: "",
      taskDate: new Date().toISOString().slice(0, 10),
      message: "",
      selectedProject: "",
      selectedService: "",
    };
  },
  components: {
    Tasks,
  },

  computed: {
    // Доступ через this.taskStore
    ...mapStores( useTaskStore)
  },
  methods: {
    addTask() {
      this.taskStore.addTask({
         task_description: this.taskDescription,
          project_id: this.selectedProject,
          service_id: this.selectedService,
          completed_date: getDatetime(this.taskDate),
      })
    },
    updateTask() {
      
    },

    toggleIsAddOpen() {
      this.isAddOpen = !this.isAddOpen;
    },
  },
  mounted() {
    this.taskStore.getInfo();
  },
};
</script>

<template>
  <div class="wrapper">
    <h1 class="title m3">Your Tasks</h1>

    <p v-if="message">{{ message }}</p>

    <button @click="toggleIsAddOpen" class="btn btn-accent m1">
      Add new task report
    </button>
    <button>Edit task</button>
    <button @click="this.taskStore.getInfo2()" class="btn btn-accent m1">
      get info2
    </button>

    <div class="add-task-block" v-if="isAddOpen">
      <input
        class="input m1"
        v-model="taskDescription"
        type="textarea"
        placeholder="task description"
      />
      <input class="input m1" v-model="taskDate" type="date" />

      <select class="select m1" v-model="selectedProject">
        <option disabled value="">Choose project</option>
        <option
          v-for="project in this.taskStore.projects"
          :key="project.id"
          :value="project.id"
        >
          {{ project.name }}
        </option>
      </select>

      <select class="select m1" v-model="selectedService">
        <option disabled value="">Choose service</option>
        <option
          v-for="service in this.taskStore.services"
          :key="service.id"
          :value="service.id"
        >
          {{ service.name }}
        </option>
      </select>

      <!-- <button @click="addTask" class="btn btn-primary m1">Add</button> -->
      <button @click="addTask" class="btn btn-primary m1">
        Add task with store
      </button>
      <button @click="updateTask">update task</button>
    </div>

    <Tasks :tasks="this.taskStore.tasks" :projects="this.taskStore.projects" />
  </div>
</template>

<!-- <div class="message message--success">Успех!</div>
    <div class="message message--success">Задача успешно создана</div>

    <div class="message message--error">Ошибка</div> -->

********************* 
C:\projects\Vue\malina reports\front\src\views\Login.vue

<script>
export default {
  data() {
    return {
      username: "",
      password: "",
      message: ''
    };
  },
  methods: {
    async login() {
      const response = await fetch("http://localhost:3000/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          username: this.username,
          password: this.password,
        }),
      });

      if (response.ok) {
        const data = await response.json();
        console.log(data, 'data here')
        localStorage.setItem("authToken", data.token);
        localStorage.setItem("user", JSON.stringify(data.user));

        this.$router.push("/");
      } else {
        // console.error("Login failed:", await response.json());
        this.message = 'Login failed';
      }

      console.log(response);
    },
  },
};
</script>

<template>
  <div class = "wrapper">
    <h1 class = "title m2">Login</h1>
    <p>{{ message }}</p>
      <p class = "m1">Login</p>
      <input
        class = "input m1"
        v-model="username"
        type="text"
        placeholder="login"
      />
    <p class = "m1">Password</p>
    <input
      class = "input m1"
      v-model="password"
      type="password"
      placeholder="password"
    />
    <div class = "btns">
      <button @click="login" class = "btn btn-primary">Log In</button>
      <button class = "btn btn-outline"><router-link to="/register">Register</router-link></button>
    </div>
  </div>
</template>

<style scoped>
  .btns {
    display: flex;
    gap: 10px;
  }
</style>

********************* 
C:\projects\Vue\malina reports\front\src\views\Register.vue

<script>
export default {
  data() {
    return {
      username: "",
      password: "",
    };
  },
  methods: {
    async createUser() {
      const response = await fetch("http://localhost:3000/create-user", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ username: this.username, password: this.password }),
      });
    },
  },
};

</script>

<template>
   <div class = "wrapper">
    <h1 class = "title m2">Registration</h1>
    <p>{{ message }}</p>
      <p class = "m1">Login</p>
      <input
        class = "input m1"
        v-model="username"
        type="text"
        placeholder="login"
      />
    <p class = "m1">Password</p>
    <input
      class = "input m1"
      v-model="password"
      type="password"
      placeholder="password"
    />
    <div class = "btns">
      <button @click="createUser" class = "btn btn-primary">Register</button>
    </div>
  </div>
</template>
********************* 
C:\projects\Vue\malina reports\front\src\views\Settings.vue

<script>
import { useExampleStore } from "@/stores";
import { mapStores } from "pinia";

export default {
  data() {
    return {
      inputDate: new Date().toISOString().slice(0, 10),
    };
  },
  methods: {
    getCurrentDateTime() {
      const now = new Date();

      now.setSeconds(0, 0);

      return now.toISOString().slice(0, 16);
    },
  },
  computed: {
    formattedDate() {
      const now = new Date();

      const hours = String(now.getHours()).padStart(2, "0");
      const minutes = String(now.getMinutes()).padStart(2, "0");
      const datetimeValue = `${this.inputDate} ${hours}:${minutes}:00`;

      return datetimeValue;
    },
    ...mapStores(useExampleStore),
  },
};
</script>

<template>
  <div style="width: 400px">
    <button class="btn btn-primary btn-md">Primary</button>
    <button class="btn btn-secondary">Secondary</button>
    <button class="btn btn-accent">Accent</button>
    <button class="btn btn-outline">Outline</button>
  </div>

  <p>{{ this.exampleStore.counter }}</p>
  <button @click="this.exampleStore.increment()">+1</button>

  <input
    class="input m1"
    v-model="inputDate"
    type="date"
    value="formattedDate"
  />

  <p>
    {{ formattedDate }}
  </p>
</template>

********************* 
C:\projects\Vue\malina reports\front\src\App.vue

<script>
export default {
  data() {
    return {
      username: "",
      password: "",
    };
  },
  methods: {
    async createUser() {
      const response = await fetch("http://localhost:3000/create-user", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          username: this.username,
          password: this.password,
        }),
      });
    },
  },
};
</script>

<template>
  <nav class = "nav m2">
    <router-link to="/">Home</router-link>
    <router-link to="/login">Login</router-link>
    <router-link to="/register">Register</router-link>
    <router-link to="/settings">Settings</router-link>
    <a href="">Log out</a>
  </nav>

  <router-view />
</template>

<style scoped>
  .nav {
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: end;
    gap: 15px;
    background-color: var(--color-primary);
    padding-inline: 20px;
  }
  .nav a {
    color: var(--color-light);
    font-weight: 700;
    text-decoration: none;
  }
</style>

********************* 
C:\projects\Vue\malina reports\front\src\main.js

import './assets/styles.css';

import { createApp } from 'vue'
import { createPinia } from 'pinia';
import router from './router';


import App from './App.vue'

const pinia = createPinia();
const myApp = createApp(App);

myApp.use(router);
myApp.use(pinia); 

myApp.mount('#app')
