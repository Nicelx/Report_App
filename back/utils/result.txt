
********************* 
C:\projects\Vue\malina reports\front\src\components\Tasks.vue

<script>
export default {
  props: {
    tasks: {
      type: Array,
      required: true,
      default: () => [], // Значение по умолчанию - пустой массив
    },
    projects: {
      type: Array,
      required: true,
      default: () => [], // Значение по умолчанию - пустой массив
    },
  },
  methods: {
    formatDate(dateStr) {
      const utcDate = new Date(dateStr);
      const ruDate = utcDate.toLocaleDateString("ru-RU");
      return ruDate;
      // return dateStr;
    },
  },
  computed: {
    projectMap() {
      const map = {};
      this.projects.forEach((project) => {
        map[project.id] = project.name;
      });
      return map;
    },
    sortedTasks() {
      return [...this.tasks].sort((a, b) => {
        return new Date(b.completed_date) - new Date(a.completed_date);
      });
    },
  },
};
</script>

<template>
  <div class="tasks">
    <p class="title-secondary">Список выполненных задач:</p>
    <div class="tasks__list">
      
      <div v-for="task in sortedTasks" :key="task.id" class="task">
        <p class="task__description">
          {{ task.task_description }}
        </p>

        <div class="task__extra">
          <p class="task__project">{{ projectMap[task.project_id] }}</p>
          <p class="task__time">{{ formatDate(task.completed_date) }}</p>
        </div>

        <div class="task__actions">
          <button class="btn btn-accent task__edit">Edit</button>
        </div>
      </div>
    </div>
  </div>
</template>

********************* 
C:\projects\Vue\malina reports\front\src\router\index.js

import Settings from '../views/Settings.vue';
import Home from '../views/Home.vue';
import Login from '../views/Login.vue';
import Register from '../views/Register.vue';

import { createRouter, createWebHistory } from 'vue-router';


const routes = [
  {
    path: '/',
    name: 'Home',
    component: Home
  },
  {
    path: '/login',
    name: 'Login',
    component: Login
  },
  {
    path: '/register',
    name: 'Register',
    component: Register
  },
  {
    path: '/settings',
    name : 'Settings',
    component: Settings
  }
]

const router = createRouter({
  history: createWebHistory(),
  routes
})

export default router
********************* 
C:\projects\Vue\malina reports\front\src\stores\index.js

export * from './exampleStore';
********************* 
C:\projects\Vue\malina reports\front\src\stores\exampleStore.js

import { defineStore } from 'pinia';

export const useExampleStore = defineStore('example', {
  state: () => ({
    counter: 0,
  }),
  actions: {
    increment() {
      this.counter++;
    },
  },
  getters: {
    doubleCount: (state) => state.counter * 2,
  },
});
********************* 
C:\projects\Vue\malina reports\front\src\views\Home.vue

<script>
import Tasks from "@/components/Tasks.vue";
export default {
  data() {
    return {
      isAddOpen: false,
      taskDescription: "",
      // taskDate: this.getDate(),
      taskDate: new Date().toISOString().slice(0, 10),
      message: "",
      selectedProject: "",
      selectedService: "",
      projects: [],
      services: [],
      tasks: [],
    };
  },
  components: {
    Tasks,
  },
  methods: {
    getDate() {
      // const today = new Date();
      // const year = today.getFullYear();
      // const month = String(today.getMonth() + 1).padStart(2, "0");
      // const day = String(today.getDate()).padStart(2, "0");

      // return `${year}-${month}-${day}`;

      const now = new Date();

      const hours = String(now.getHours()).padStart(2, "0");
      const minutes = String(now.getMinutes()).padStart(2, "0");
      const seconds = String(now.getSeconds()).padStart(2, "0")
      const datetimeValue = `${this.taskDate} ${hours}:${minutes}:${seconds}`;
      
      return datetimeValue;
    },

    async addTask() {
      const token = localStorage.getItem("authToken");
      const { id: userId } = JSON.parse(localStorage.getItem("user"));

      const response = await fetch("http://localhost:3000/add-task", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          user_id: userId,
          task_description: this.taskDescription,
          project_id: this.selectedProject,
          service_id: this.selectedService,
          completed_date: this.getDate(),
        }),
      });

      console.log('response' ,response);

      this.updateTasks();
    },

    async getInfo() {
      const token = localStorage.getItem("authToken");
      // const { id: userId } = JSON.parse(localStorage.getItem("user"));

      const response = await fetch("http://localhost:3000/get-info", {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        // body: JSON.stringify({
        //   user_id: userId,
        // }),
      });

      const data = await response.json(); // предполагается, что сервер возвращает JSON
      console.log(data);

      this.projects = data.projects;
      this.services = data.services;
      this.tasks = data.tasks;
    },

    async updateTasks() {
      const token = localStorage.getItem("authToken");
      
      const response = await fetch("http://localhost:3000/get-tasks", {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      const data = await response.json(); // предполагается, что сервер возвращает JSON
     
      this.tasks = data;
    },
    toggleIsAddOpen() {
      this.isAddOpen = !this.isAddOpen;
    },
    getProjectName(projectId) {
      const project = this.projects.find((p) => p.id === projectId);
      return project ? project.name : "Неизвестный проект";
    },
  },
  mounted() {
    this.getInfo(); // Вызов метода при загрузке компонента
  },
};
</script>

<template>
  <div class="wrapper">
    <h1 class="title m3">Your Tasks</h1>

    <p v-if="message">{{ message }}</p>

    <button @click="toggleIsAddOpen" class="btn btn-accent m1">
      Add new task report
    </button>
    <button @click="getInfo" class="btn btn-accent m1">get info</button>

    <div class="add-task-block" v-if="isAddOpen">
      <input
        class="input m1"
        v-model="taskDescription"
        type="textarea"
        placeholder="task description"
      />
      <input class="input m1" v-model="taskDate" type="date" />

      <select class="select m1" v-model="selectedProject">
        <option disabled value="">Choose project</option>
        <option
          v-for="project in projects"
          :key="project.id"
          :value="project.id"
        >
          {{ project.name }}
        </option>
      </select>

      <select class="select m1" v-model="selectedService">
        <option disabled value="">Choose service</option>
        <option
          v-for="service in services"
          :key="service.id"
          :value="service.id"
        >
          {{ service.name }}
        </option>
      </select>

      <button @click="addTask" class="btn btn-primary m1">Add</button>
    </div>

    <Tasks :tasks="tasks" :projects="projects" />

    <!-- <div class="message message--success">Успех!</div>
    <div class="message message--success">Задача успешно создана</div>

    <div class="message message--error">Ошибка</div> -->
  </div>
</template>

********************* 
C:\projects\Vue\malina reports\front\src\views\Login.vue

<script>
export default {
  data() {
    return {
      username: "",
      password: "",
      message: ''
    };
  },
  methods: {
    async login() {
      const response = await fetch("http://localhost:3000/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          username: this.username,
          password: this.password,
        }),
      });

      if (response.ok) {
        const data = await response.json();
        console.log(data, 'data here')
        localStorage.setItem("authToken", data.token);
        localStorage.setItem("user", JSON.stringify(data.user));

        this.$router.push("/");
      } else {
        // console.error("Login failed:", await response.json());
        this.message = 'Login failed';
      }

      console.log(response);
    },
  },
};
</script>

<template>
  <div class = "wrapper">
    <h1 class = "title m2">Login</h1>
    <p>{{ message }}</p>
      <p class = "m1">Login</p>
      <input
        class = "input m1"
        v-model="username"
        type="text"
        placeholder="login"
      />
    <p class = "m1">Password</p>
    <input
      class = "input m1"
      v-model="password"
      type="password"
      placeholder="password"
    />
    <div class = "btns">
      <button @click="login" class = "btn btn-primary">Log In</button>
      <button class = "btn btn-outline"><router-link to="/register">Register</router-link></button>
    </div>
  </div>
</template>

<style scoped>
  .btns {
    display: flex;
    gap: 10px;
  }
</style>

********************* 
C:\projects\Vue\malina reports\front\src\views\Register.vue

<script>
export default {
  data() {
    return {
      username: "",
      password: "",
    };
  },
  methods: {
    async createUser() {
      const response = await fetch("http://localhost:3000/create-user", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ username: this.username, password: this.password }),
      });
    },
  },
};

</script>

<template>
   <div class = "wrapper">
    <h1 class = "title m2">Registration</h1>
    <p>{{ message }}</p>
      <p class = "m1">Login</p>
      <input
        class = "input m1"
        v-model="username"
        type="text"
        placeholder="login"
      />
    <p class = "m1">Password</p>
    <input
      class = "input m1"
      v-model="password"
      type="password"
      placeholder="password"
    />
    <div class = "btns">
      <button @click="createUser" class = "btn btn-primary">Register</button>
    </div>
  </div>
</template>
********************* 
C:\projects\Vue\malina reports\front\src\views\Settings.vue

<script>
export default {
  data() {
    return {
      inputDate: new Date().toISOString().slice(0, 10),
    };
  },
  methods: {
    getCurrentDateTime() {
      const now = new Date();

      now.setSeconds(0, 0);

      return now.toISOString().slice(0, 16);
    },
  },
  computed: {
    formattedDate() {
      const now = new Date();

      const hours = String(now.getHours()).padStart(2, "0");
      const minutes = String(now.getMinutes()).padStart(2, "0");
      const datetimeValue = `${this.inputDate} ${hours}:${minutes}:00`;
      
      return datetimeValue;
    },
  },
};
</script>

<template>
  <div style="width: 400px">
    <button class="btn btn-primary btn-md">Primary</button>
    <button class="btn btn-secondary">Secondary</button>
    <button class="btn btn-accent">Accent</button>
    <button class="btn btn-outline">Outline</button>
  </div>

  <input
    class="input m1"
    v-model="inputDate"
    type="date"
    value="formattedDate"
  />

  <p>
    {{ formattedDate }}
  </p>
</template>

********************* 
C:\projects\Vue\malina reports\front\src\App.vue

<script>
export default {
  data() {
    return {
      username: "",
      password: "",
    };
  },
  methods: {
    async createUser() {
      const response = await fetch("http://localhost:3000/create-user", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          username: this.username,
          password: this.password,
        }),
      });
    },
  },
};
</script>

<template>
  <nav class = "nav m2">
    <router-link to="/">Home</router-link>
    <router-link to="/login">Login</router-link>
    <router-link to="/register">Register</router-link>
    <router-link to="/settings">Settings</router-link>
    <a href="">Log out</a>
  </nav>

  <router-view />
</template>

<style scoped>
  .nav {
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: end;
    gap: 15px;
    background-color: var(--color-primary);
    padding-inline: 20px;
  }
  .nav a {
    color: var(--color-light);
    font-weight: 700;
    text-decoration: none;
  }
</style>

********************* 
C:\projects\Vue\malina reports\front\src\main.js

import './assets/styles.css';

import { createApp } from 'vue'
import { createPinia } from 'pinia';
import router from './router';


import App from './App.vue'

const pinia = createPinia();
const myApp = createApp(App);

myApp.use(router);
myApp.use(pinia); 

myApp.mount('#app')
