
********************* 
C:\projects\Vue\malina reports\back\config\db.js

const mysql = require('mysql2/promise');

const pool = mysql.createPool({
  host:'localhost',
  user: process.env.DB_USER,
  password: process.env.DB_PWD,
  database: 'report_app',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
});

module.exports = pool;
********************* 
C:\projects\Vue\malina reports\back\controllers\authController.js

const jwt = require("jsonwebtoken");
const User = require("../models/User");

exports.login = async (req, res) => {
  console.log(req.body);

  const { username, password } = req.body;
  const user = await User.findByUsername(username);

  if (!user) {
    return res.status(401).json({ message: "Invalid credentials" });
  }

  if (!(await User.comparePasswords(password, user.password))) {
    return res.status(401).json({ message: "Invalid credentials" });
  }

  const token = jwt.sign(
    { id: user.id, username: user.username },
    process.env.JWT_SECRET,
    { expiresIn: process.env.JWT_EXPIRES_IN }
  );
  return res.json({
    message: "Login successful",
    token,
    user: { id: user.id, username: user.username },
  });
};

********************* 
C:\projects\Vue\malina reports\back\controllers\infoController.js

const pool = require("../config/db");
const Project = require("../models/Project");
const Service = require("../models/Service");

exports.getInfo = async (req, res) => {
  const data = {}

  const projects = await Project.getAll();
  const services = await Service.getAll();

  if (!projects || !services) {
    return res.status(500).json({message: 'projects или services не найдены в бд'})
  }
  data.projects = projects;
  data.services = services;

  res.send(data);


//   getting services


};

********************* 
C:\projects\Vue\malina reports\back\controllers\taskController.js

const Task = require("../models/Task");

exports.addTask = async (req, res) => {
  console.log(req.user);
  const { user_id, task_description, completed_date, project_id, service_id } =
    req.body;

  if (
    !user_id ||
    !task_description ||
    !completed_date ||
    !project_id ||
    !service_id
  )
    return res.status(500).json({
      message: "Не все поля имеют значения",
    });

  try {
    await Task.addTask({
      user_id,
      task_description,
      completed_date,
      project_id,
      service_id,
    });
  } catch (error) {
    return res.status(500).json({
      message: "Ошибка добавления задачи в базу данных",
    });
  }

  return res.send({
    message: "task added",
  });
};

********************* 
C:\projects\Vue\malina reports\back\controllers\userController.js

const User = require("../models/User");

exports.getUsers = async (req, res) => {
  try {
    const users = await User.getAll(); // Используем const
    res.json(users); // Отправляем один ответ
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Server error" }); // Один ответ при ошибке
  }
};

exports.createUser = async (req, res) => {
  try {
    response = await User.createUser({
      username: req.body.username,
      passwrod: req.body.passwrod,
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }

  if (response)
    res.send({
      message: "user created",
    });
};

********************* 
C:\projects\Vue\malina reports\back\middleware\auth.js

const jwt = require('jsonwebtoken');


module.exports = (req, res, next) => {
    const authHeader = req.headers.authorization;
    console.log(authHeader);

     if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return res.status(401).json({ message: 'Authentication required' });
    }

    const token = authHeader.split(' ')[1];

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        req.user = decoded;    // Добавляем данные пользователя в запрос
        console.log(req.user);
    } catch (error) {
        return res.status(401).json({ message: 'Invalid or expired token' });
    }

    // console.log('token', token);
    // console.log('decoded', decoded);
    console.log('auth ok');
    next();
}
********************* 
C:\projects\Vue\malina reports\back\models\Project.js

const  pool  = require("../config/db");

class Project {
  static async getAll() {
    const [rows] = await pool.query("SELECT * FROM projects");
    return rows;
  }
}

module.exports = Project;

********************* 
C:\projects\Vue\malina reports\back\models\Task.js

const  pool  = require("../config/db");

class Task {
   static async addTask({user_id, task_description, project_id, service_id, completed_date}) {
     try {
      const [result] = await pool.execute(
        "INSERT INTO tasks (user_id, task_description, completed_date, project_id, service_id) VALUES (?, ?, ?, ?, ?)",
        [user_id,task_description, completed_date, project_id, service_id]
      );

       if (result) return result.insertId;
    } catch (error) {
        console.error(error)
    }

   
  }

  static async getAll() {
    const [rows] = await pool.query("SELECT * FROM tasks");
    return rows;
  }
}

module.exports = Task;
********************* 
C:\projects\Vue\malina reports\back\models\User.js

const pool = require("../config/db");
const bcrypt = require("bcryptjs");

class User {
  static async create({ username, password }) {
    try {
      const [result] = await pool.execute(
        "INSERT INTO users (username,  password) VALUES (?, ?)",
        [username, password]
      );
    } catch (error) {}

    if (result) return result.insertId;
  }

  static async getAll() {
    const [rows] = await pool.query("SELECT id, username FROM users");
    return rows;
  }
  static async findByUsername(username) {
    try {
      const [users] = await pool.execute(
        "SELECT * FROM users WHERE username = ?",
        [username]
      );
      return users[0];
    } catch (error) {}
  }

  static async comparePasswords(candidatePassword, hashedPassword) {
    if (candidatePassword === hashedPassword) return true;
    return false;

    // return bcrypt.compare(candidatePassword, hashedPassword);
  }
}

module.exports = User;

********************* 
C:\projects\Vue\malina reports\back\models\Service.js

const  pool  = require("../config/db");

class Service {
  static async getAll() {
    const [rows] = await pool.query("SELECT * FROM Services");
    return rows;
  }
}

module.exports = Service;
********************* 
C:\projects\Vue\malina reports\back\index.js

const express = require("express");
const cors = require("cors");
require('dotenv').config();
const authMiddleware = require('./middleware/auth');

const User = require("./models/User");

const { getUsers } = require("./controllers/userController");
const { login } = require("./controllers/authController");
const {addTask} = require('./controllers/taskController');
const { getInfo } = require("./controllers/infoController");

const app = express();
const port = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

app.get("/get-info", authMiddleware , getInfo);
app.get("/get-info", getUsers);
app.get("/get-info2", async (req, res) => {
  // В этом блоке можно обработать запрос и отправить ответ
  res.send({ message: "Это ответ на GET-запрос get-info2" });
});
app.post("/login", login);

app.post("/create-user", async (req, res) => {
  console.log(req.body);

  await User.create({
    username: req.body.username,
    password: req.body.password,
  });

  // В этом блоке можно обработать запрос и отправить ответ
  res.send({ message: "Пользователь создан" });
});

app.post("/add-task", authMiddleware, addTask);

app.listen(port, () => {
  console.log(`Сервер запущен на порту ${port}`);
});

********************* 
C:\projects\Vue\malina reports\front\src\assets\styles.css

/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/
/* #region reset */
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video,
input,
select {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
  box-sizing: border-box;
}
/* HTML5 display-role reset for older browsers */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}
body {
  line-height: 1;
}
ol,
ul {
  list-style: none;
}
blockquote,
q {
  quotes: none;
}
blockquote:before,
blockquote:after,
q:before,
q:after {
  content: "";
  content: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
a {
  color: inherit;
  text-decoration: none;
}

/* #endregion */

/* #region base */
body {
  background-color: var(--color-dark);
  color: var(--color-light);
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  line-height: 1.6;
  min-height: 100vh;
  font-size: 18px;
}
input,
select {
  max-width: 300px;
}

:root {
  --color-primary: #00ff95;
  --color-secondary: #ff00d0;
  --color-accent: #ffd000;
  --color-dark: #001f0f;
  --color-light: #e6fff4;
  --glow: 0 0 30px rgba(0, 255, 149, 0.8), 0 0 55px rgba(0, 255, 149, 0.4);
  --glow-color: rgba(0, 255, 149, 0.95);
  --glow-primary: 0 0 15px var(--glow-color), 0 0 30px rgba(0, 255, 149, 0.8),
    0 0 45px rgba(0, 255, 149, 0.4);
  --glow-secondary: 0 0 15px rgba(255, 0, 208, 0.8),
    0 0 30px rgba(255, 0, 208, 0.6);
  --glow-accent: 0 0 15px rgba(255, 208, 0, 0.8),
    0 0 30px rgba(255, 208, 0, 0.6);
}
.wrapper {
  margin-inline: auto;
  max-width: 1280px;
  width: 100%;
}
.title {
  font-size: 2.8rem; /* Крупный размер для главных заголовков */
  font-weight: 700;
  line-height: 1.2;
  color: var(--color-primary);
  text-shadow: 0 0 10px var(--glow-color);
}
.title-secondary {
  font-size: 1.8rem; /* Умеренно увеличенный размер */
  font-weight: 600;
  line-height: 1.3;
  margin-bottom: 1.2rem;
  color: var(--color-accent);
}
.m3 {
  margin-bottom: 30px;
}
.m2 {
  margin-bottom: 20px;
}
.m1 {
  margin-bottom: 10px;
}

/* #endregion */

/* #region components */
.btn {
  display: inline-block;
  padding-inline: 24px;
  height: 45px;
  border: none;
  border-radius: 2px;
  font-weight: 600;
  text-align: center;
  text-decoration: none;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
  outline: none;
  font-size: 1rem;
  z-index: 1;
}
.btn:hover {
  box-shadow: var(--glow-primary);
}

.btn:active::after {
  box-shadow: 0 0 25px var(--glow-color);
}

.btn-primary {
  background-color: var(--color-primary);
  color: var(--color-light);
}

.btn-secondary {
  background-color: var(--color-secondary);
  color: var(--color-light);
}
.btn-secondary:hover {
  box-shadow: var(--glow-secondary);
}

.btn-accent {
  background-color: var(--color-accent);
  color: var(--color-light);
}
.btn-accent:hover {
  box-shadow: var(--glow-accent);
}

.btn-outline {
  background-color: transparent;
  color: var(--color-primary);
  border: 2px solid var(--color-primary);
}

.btn-outline:hover {
  background-color: var(--color-primary);
  color: var(--color-light);
}

.input {
  display: block;
  width: 100%;
  padding: 12px 16px;
  background-color: rgba(0, 31, 15, 0.5);
  color: var(--color-light);
  border: 1px solid var(--color-primary);
  border-radius: 2px;
  font-family: inherit;
  font-size: 1rem;
  transition: all 0.3s ease;
}

.input:focus {
  outline: none;
  border-color: var(--color-primary);
  box-shadow: var(--glow-primary);
}
.select {
  display: block;
  width: 100%;
  padding: 12px 40px 12px 16px;
  background-color: rgba(0, 31, 15, 0.5);
  color: var(--color-light);
  border: 1px solid var(--color-primary);
  border-radius: 2px;
  appearance: none;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  background-image: linear-gradient(
      45deg,
      transparent 50%,
      var(--color-primary) 50%
    ),
    linear-gradient(135deg, var(--color-primary) 50%, transparent 50%);
  background-position: calc(100% - 17px) 50%, calc(100% - 12px) 50%;
  background-size: 5px 5px, 5px 5px;
  background-repeat: no-repeat;
}

.select:is(:focus, :hover) {
  outline: none;
  border-color: var(--color-primary);
  box-shadow: var(--glow-primary);
}

.select option {
  background-color: var(--color-dark);
  color: var(--color-light);
  padding: 8px 12px;
}

.select option:checked {
  background-color: var(--color-primary);
  color: var(--color-dark);
  font-weight: 600;
}

/* #endregion */

/* #region task card */
.task {
  background-color: rgba(0, 31, 15, 0.4);
  border: 1px solid rgba(0, 255, 149, 0.2);
  border-radius: 4px;
  padding: 12px;
  margin-bottom: 12px;
  position: relative;
  transition: all 0.3s ease;
}

.task:hover {
  border-color: var(--color-primary);
  box-shadow: var(--glow-primary);
}

.task__description {
  margin-bottom: 5px;
  line-height: 1.5;
  word-break: break-word;
}

.task__project {
  font-weight: 600;
  color: var(--color-secondary);
  /* font-size: 0.9rem; */
  text-shadow: 0 0 5px rgba(255, 0, 208, 0.4);
}

.task__time {
  color: rgba(230, 255, 244, 0.7);
  /* font-size: 0.85rem; */
}

.task__actions {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
}

.task__edit {
  position: absolute;
  bottom: 10px;
}
.task__extra {
  padding-right: 100px;
  display: flex;
  justify-content: space-between;
  gap: 10px;
  align-items: center;
}

/* #endregion */
/* #region message component */
.message {
  width: 300px;
  padding: 18px 22px;
  border-radius: 4px;
  margin-bottom: 25px;
  border: 1px solid transparent;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  transition: all 0.3s ease;
  animation: fadeOut 0.7s ease-in-out 1.5s forwards;
  opacity: 1;
  transform: translateY(0);
}

.message--success {
  background-color: rgba(0, 31, 15, 0.8);
  color: var(--color-primary);
  border-color: rgba(0, 255, 149, 0.3);
  box-shadow: var(--glow-primary);
}
.message--error {
  background-color: rgba(31, 0, 15, 0.8);
  color: var(--color-secondary);
  border-color: rgba(255, 0, 208, 0.3);
  box-shadow: var(--glow-secondary);
}

/* #endregion */

/* #region keyframes */
@keyframes fadeOut {
  0% {
    opacity: 1;
    transform: translateY(0);
  }
  100% {
    opacity: 0;
    transform: translateY(-30px);
  }
}

/* #endregion */

********************* 
C:\projects\Vue\malina reports\front\src\components\Tasks.vue

<script>
export default {
}
</script>

<template>
    <div class="tasks">
      <p class="title-secondary">Список задач:</p>
      <div class="tasks__list">

        <div class="task">
          <p class="task__description">
            Описание задачи, что сделал тут скорее всего не будет много текста
          </p>

          <div class = "task__extra">
            <p class="task__project">проект задачи</p>
            <p class="task__time">12.07.2025 (2 дн назад)</p>  
          </div>

          <div class="task__actions">
            <button class="btn btn-accent task__edit">Edit</button>
          </div>
        </div>

        <div class="task">
          <p class="task__description">
            Описание задачи, что сделал тут скорее всего не будет много текста Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptatum tempora illum molestias obcaecati iure dolor ipsum vitae numquam ad saepe!
          </p>

          <div class = "task__extra">
            <p class="task__project">проект задачи</p>
            <p class="task__time">12.07.2025 (3 дн назад)</p>  
          </div>

          <div class="task__actions">
            <button class="btn btn-accent task__edit">Edit</button>
          </div>
        </div>
        <div class="task">
          <p class="task__description">
            Описание задачи, что сделал тут скорее всего не будет много текста
          </p>

          <div class = "task__extra">
            <p class="task__project">проект задачи</p>
            <p class="task__time">12.07.2025 (1 дн назад)</p>  
          </div>

          <div class="task__actions">
            <button class="btn btn-accent task__edit">Edit</button>
          </div>
        </div>

      </div>
    </div>
</template>

********************* 
C:\projects\Vue\malina reports\front\src\router\index.js

import Settings from '../views/Settings.vue';
import Home from '../views/Home.vue';
import Login from '../views/Login.vue';
import Register from '../views/Register.vue';

import { createRouter, createWebHistory } from 'vue-router';


const routes = [
  {
    path: '/',
    name: 'Home',
    component: Home
  },
  {
    path: '/login',
    name: 'Login',
    component: Login
  },
  {
    path: '/register',
    name: 'Register',
    component: Register
  },
  {
    path: '/settings',
    name : 'Settings',
    component: Settings
  }
]

const router = createRouter({
  history: createWebHistory(),
  routes
})

export default router
********************* 
C:\projects\Vue\malina reports\front\src\views\Home.vue

<script>
import Tasks from "@/components/Tasks.vue";
export default {
  data() {
    return {
      isAddOpen: false,
      taskDescription: "",
      taskDate: this.getDate(),
      message: "",
      selectedProject: "",
      projectsOptions: [
        { id: 1, text: "Project 1" },
        { id: 2, text: "Project 2" },
        { id: 3, text: "Project 3" },
      ],
      selectedService: "",
      servicesOptions: [
        { id: 1, text: "Service 1" },
        { id: 2, text: "Service 2" },
        { id: 3, text: "Service 3" },
      ],
    };
  },
  components: {
    Tasks,
  },
  methods: {
    async getTasks() {
      console.log("here full list of tasks");
    },

    getDate() {
      const today = new Date();
      const year = today.getFullYear();
      const month = String(today.getMonth() + 1).padStart(2, "0");
      const day = String(today.getDate()).padStart(2, "0");

      return `${year}-${month}-${day}`;
    },

    async addTask() {
      const token = localStorage.getItem("authToken");
      const { id: userId } = JSON.parse(localStorage.getItem("user"));

      const response = await fetch("http://localhost:3000/add-task", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          user_id: userId,
          task_description: this.taskDescription,
          project_id: this.selectedProject,
          service_id: this.selectedService,
          completed_date: this.taskDate,
        }),
      });
    },

    async getInfo() {
     const token = localStorage.getItem("authToken");
      // const { id: userId } = JSON.parse(localStorage.getItem("user"));

      const response = await fetch("http://localhost:3000/get-info", {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        // body: JSON.stringify({
        //   user_id: userId,
        // }),
      });

      const data = await response.json(); // предполагается, что сервер возвращает JSON
      console.log(data);
    },
    toggleIsAddOpen() {
      this.isAddOpen = !this.isAddOpen;
    },
  },
  // mounted: {

  // }
};
</script>

<template>
  <div class="wrapper">
    <h1 class="title m3">Your Tasks</h1>

    <p v-if="message">{{ message }}</p>

    <button @click="toggleIsAddOpen" class="btn btn-accent m1">
      Add new task report
    </button>
    <button @click="getInfo" class="btn btn-accent m1">
      get info
    </button>

    <div class="add-task-block" v-if="isAddOpen">
      <input
        class="input m1"
        v-model="taskDescription"
        type="textarea"
        placeholder="task description"
      />
      <input class="input m1" v-model="taskDate" type="date" />

      <select class="select m1" v-model="selectedProject">
        <option disabled value="">Choose project</option>
        <option
          v-for="option in projectsOptions"
          :key="option.id"
          :value="option.id"
        >
          {{ option.text }}
        </option>
      </select>

      <select class="select m1" v-model="selectedService">
        <option disabled value="">Choose service</option>
        <option
          v-for="option in servicesOptions"
          :key="option.id"
          :value="option.id"
        >
          {{ option.text }}
        </option>
      </select>

      <button @click="addTask" class="btn btn-primary m1">Add</button>
    </div>

    <Tasks />

    <!-- <div class="message message--success">Успех!</div>
    <div class="message message--success">Задача успешно создана</div>

    <div class="message message--error">Ошибка</div> -->
   
  </div>
</template>

********************* 
C:\projects\Vue\malina reports\front\src\views\Login.vue

<script>
export default {
  data() {
    return {
      username: "",
      password: "",
      message: ''
    };
  },
  methods: {
    async login() {
      const response = await fetch("http://localhost:3000/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          username: this.username,
          password: this.password,
        }),
      });

      if (response.ok) {
        const data = await response.json();
        console.log(data, 'data here')
        localStorage.setItem("authToken", data.token);
        localStorage.setItem("user", JSON.stringify(data.user));

        this.$router.push("/");
      } else {
        // console.error("Login failed:", await response.json());
        this.message = 'Login failed';
      }

      console.log(response);
    },
  },
};
</script>

<template>
  <div class = "wrapper">
    <h1 class = "title m2">Login</h1>
    <p>{{ message }}</p>
      <p class = "m1">Login</p>
      <input
        class = "input m1"
        v-model="username"
        type="text"
        placeholder="login"
      />
    <p class = "m1">Password</p>
    <input
      class = "input m1"
      v-model="password"
      type="password"
      placeholder="password"
    />
    <div class = "btns">
      <button @click="login" class = "btn btn-primary">Log In</button>
      <button class = "btn btn-outline"><router-link to="/register">Register</router-link></button>
    </div>
  </div>
</template>

<style scoped>
  .btns {
    display: flex;
    gap: 10px;
  }
</style>

********************* 
C:\projects\Vue\malina reports\front\src\views\Register.vue

<script>
export default {
  data() {
    return {
      username: "",
      password: "",
    };
  },
  methods: {
    async createUser() {
      const response = await fetch("http://localhost:3000/create-user", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ username: this.username, password: this.password }),
      });
    },
  },
};

</script>

<template>
   <div class = "wrapper">
    <h1 class = "title m2">Registration</h1>
    <p>{{ message }}</p>
      <p class = "m1">Login</p>
      <input
        class = "input m1"
        v-model="username"
        type="text"
        placeholder="login"
      />
    <p class = "m1">Password</p>
    <input
      class = "input m1"
      v-model="password"
      type="password"
      placeholder="password"
    />
    <div class = "btns">
      <button class = "btn btn-primary">Register</button>
    </div>
  </div>
</template>
********************* 
C:\projects\Vue\malina reports\front\src\views\Settings.vue

<script>
export default {
  data() {
    return {};
  },
  methods: {},
};

</script>

<template>
  <div style="width: 400px">
    <button class="btn btn-primary btn-md">Primary</button>
    <button class="btn btn-secondary">Secondary</button>
    <button class="btn btn-accent">Accent</button>
    <button class="btn btn-outline">Outline</button>
  </div>
</template>
********************* 
C:\projects\Vue\malina reports\front\src\App.vue

<script>
export default {
  data() {
    return {
      username: "",
      password: "",
    };
  },
  methods: {
    async createUser() {
      const response = await fetch("http://localhost:3000/create-user", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          username: this.username,
          password: this.password,
        }),
      });
    },
  },
};
</script>

<template>
  <nav class = "nav m2">
    <router-link to="/">Home</router-link>
    <router-link to="/login">Login</router-link>
    <router-link to="/register">Register</router-link>
    <router-link to="/settings">Settings</router-link>
    <a href="">Log out</a>
  </nav>

  <router-view />
</template>

<style scoped>
  .nav {
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: end;
    gap: 15px;
    background-color: var(--color-primary);
    padding-inline: 20px;
  }
  .nav a {
    color: var(--color-light);
    font-weight: 700;
    text-decoration: none;
  }
</style>

********************* 
C:\projects\Vue\malina reports\front\src\main.js

import './assets/styles.css';

import { createApp } from 'vue'
import router from './router';


import App from './App.vue'


const myApp = createApp(App);

myApp.use(router);
myApp.mount('#app')
